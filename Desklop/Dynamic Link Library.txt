#include <iostream>
#include <windows.h>

// Declare the mathematical functions that will be exported
extern "C" __declspec(dllexport) double Add(double a, double b) {
    return a + b;
}

extern "C" __declspec(dllexport) double Subtract(double a, double b) {
    return a - b;
}

extern "C" __declspec(dllexport) double Multiply(double a, double b) {
    return a * b;
}

extern "C" __declspec(dllexport) double Divide(double a, double b) {
    if (b == 0) {
        std::cerr << "Error: Division by zero!" << std::endl;
        return 0;  // Return 0 in case of division by zero
    }
    return a / b;
}

// Main function that works as both DLL and executable (for demonstration)
int main() {
    // Dynamically load the library from memory (DLL is implicitly loaded from the same file)
    // You may choose to use a separate DLL file in a real-world application.
    
    // Since we're not actually creating a separate DLL file here, we'll just demonstrate 
    // the logic of how it works in an executable.

    // Function pointers to the functions in the DLL (normally, we'd use LoadLibrary and GetProcAddress)
    typedef double (*MathOperation)(double, double);
    
    MathOperation AddFunc = Add;
    MathOperation SubtractFunc = Subtract;
    MathOperation MultiplyFunc = Multiply;
    MathOperation DivideFunc = Divide;

    // Test mathematical operations
    double a = 20.0, b = 4.0;

    std::cout << "Add: " << AddFunc(a, b) << std::endl;
    std::cout << "Subtract: " << SubtractFunc(a, b) << std::endl;
    std::cout << "Multiply: " << MultiplyFunc(a, b) << std::endl;
    std::cout << "Divide: " << DivideFunc(a, b) << std::endl;

    return 0;
}
